name: Nightly Build

on: 
  schedule:
    - cron:  '0 0 * * *'
  workflow_dispatch:

jobs:
  create-release:

    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
      version_name: ${{ steps.mucommander_full_version.outputs.VERSION_NAME }}
      version: ${{ steps.mucommander_version.outputs.VERSION }}

    steps:
      - name: Remove previous tag and release
        uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          delete_release: true
          tag_name: nightly
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/create-release@v1
        id: create_release
        with:
          tag_name: nightly
          release_name: Nightly
          prerelease: true
          draft: true
          body: ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v3

      - name : Get full version
        id: mucommander_full_version
        run: |
          echo "VERSION_NAME=$(${{github.workspace}}/gradlew -q printVersionName)" >> $GITHUB_OUTPUT

      - name : Get version
        id: mucommander_version
        run: |
          echo "VERSION=$(${{github.workspace}}/gradlew -q printVersion)" >> $GITHUB_OUTPUT



  release-macos-artifacts:

    runs-on: macos-latest
    needs: create-release

    steps:
      - uses: actions/checkout@v3OA
        with:
          submodules: recursive
      - uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - uses: gradle/wrapper-validation-action@v1
      - uses: gradle/gradle-build-action@v2
        with:
          arguments: dmg

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: "./build/distributions/mucommander-${{ needs.create-release.outputs.version_name }}.dmg"
          asset_name: mucommander-snapshot.dmg
          asset_content_type: application/octet-stream

  release-linux-artifacts:

    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - uses: gradle/wrapper-validation-action@v1
      - uses: gradle/gradle-build-action@v2
        with:
          arguments: portable tgz

      - uses: DovnarAlexander/github-action-file-detection@master
        id: find_portable
        with:
          wildcard: '*-portable.zip'
          base_path: build/distributions

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_portable.outputs.found }}
          asset_name: mucommander-snapshot-portable.zip
          asset_content_type: application/zip

      - uses: DovnarAlexander/github-action-file-detection@master
        id: find_tgz
        with:
          wildcard: '*.tgz'
          base_path: build/distributions

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_tgz.outputs.found }}
          asset_name: mucommander-snapshot.tgz
          asset_content_type: application/gzip

  release-windows-artifacts:

    runs-on: windows-latest
    needs: create-release

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - uses: gradle/wrapper-validation-action@v1

      - uses: gradle/gradle-build-action@v2
        with:
          arguments: msi

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: "./build/distributions/mucommander-${{ needs.create-release.outputs.version }}.msi"
          asset_name: mucommander-snapshot.msi
          asset_content_type: application/octet-stream

  publish-release:

    runs-on: ubuntu-latest
    needs: [ create-release, release-linux-artifacts, release-macos-artifacts, release-windows-artifacts ]

    steps:
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.create-release.outputs.release_id }}
